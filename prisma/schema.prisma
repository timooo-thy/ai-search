generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  conversations Conversation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// AI SDK UIMessage related models
model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("conversation")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           MessageRole
  metadata       Json? // Custom metadata as JSON
  parts          MessagePart[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("message")
}

model MessagePart {
  id        String          @id @default(cuid())
  messageId String
  message   Message         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      MessagePartType
  content   Json // Store part content as JSON for flexibility
  order     Int // To maintain order of parts
  state     String? // For parts that have state (streaming, done, etc.)
  createdAt DateTime        @default(now())

  @@map("message_part")
}

enum MessageRole {
  system
  user
  assistant

  @@map("message_role")
}

enum MessagePartType {
  text

  @@map("message_part_type")
}
