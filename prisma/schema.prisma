generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  chats         Chat[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Chats table
model Chat {
  id        String    @id @default(cuid())
  title     String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?

  @@map("chat")
}

// Messages table
model Message {
  id        String      @id @default(cuid())
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      MessageRole
  parts     Part[]

  @@index([chatId], map: "messages_chat_id_idx")
  @@index([chatId, createdAt], map: "messages_chat_id_created_at_idx")
  @@map("message")
}

// Parts table
model Part {
  id        String          @id @default(cuid())
  messageId String
  message   Message         @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      MessagePartType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  order     Int             @default(0)

  // Text fields
  text_text String?

  // Reasoning fields
  reasoning_text String?

  // File fields
  file_mediaType String?
  file_filename  String?
  file_url       String?

  // Source url fields
  source_url_sourceId String?
  source_url_url      String?
  source_url_title    String?

  // Source document fields
  source_document_sourceId  String?
  source_document_mediaType String?
  source_document_title     String?
  source_document_filename  String?

  // Provider metadata
  providerMetadata Json?

  @@index([messageId], map: "parts_message_id_idx")
  @@index([messageId, order], map: "parts_message_id_order_idx")
  @@map("part")
}

enum MessageRole {
  system
  user
  assistant

  @@map("message_role")
}

enum MessagePartType {
  text
  reasoning
  file
  source_url
  source_document
  step_start

  @@map("message_part_type")
}
